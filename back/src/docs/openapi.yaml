openapi: 3.0.3
info:
  title: TCC HomeCare API
  version: "1.0.0"
  description: |
    API do aplicativo de **atendimento domiciliar** (Flutter + Node.js/Express + Sequelize + MySQL).
    - Autenticação: **JWT Bearer**.
    - Perfis: **ADMIN**, **ATENDENTE**, **MEDICO (MÉDICO)**, **PATIENT (PACIENTE)**.
    - Padrão de rotas **sem versão no path** (ex.: `/auth/login`, `/reports/kpis`).

servers:
  - url: http://localhost:3333
    description: Ambiente local
  - url: https://{host}
    description: Ambiente variável (ex.: produção)
    variables:
      host:
        default: api.seu-dominio.com

tags:
  - name: Auth
  - name: Doctors
  - name: Patients
  - name: Availability
  - name: Appointments
  - name: Exams
  - name: Reports

security:
  - bearerAuth: []

paths:
  /auth/login:
    post:
      tags: [Auth]
      summary: Login e emissão de JWT
      security: []   # público
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginInput' }
            examples:
              admin:
                value: { email: "admin@tcc.local", password: "123456" }
              medico:
                value: { email: "medico@tcc.local", password: "123456" }
              atendente:
                value: { email: "atendente@tcc.local", password: "123456" }
              paciente:
                value: { email: "paciente@tcc.local", password: "123456" }
      responses:
        '200':
          description: Autenticado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LoginResponse' }
        '401':
          description: Credenciais inválidas
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /auth/me:
    get:
      tags: [Auth]
      summary: Retorna o usuário autenticado (perfil/claims)
      responses:
        '200':
          description: Usuário atual
          content:
            application/json:
              schema: { $ref: '#/components/schemas/MeResponse' }
        '401':
          description: Não autenticado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /auth/register/patient:
    post:
      tags: [Auth]
      summary: Registrar Paciente (somente ATENDENTE)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RegisterPatientInput' }
            example:
              name: "Paciente Novo"
              email: "paciente.novo@tcc.com"
              cpf: "33333333334"
              password: "paciente123"
              phone: "11988880000"
              address: "Rua Nova, 456"
              birthDate: "1995-05-10"
      responses:
        '201':
          description: Paciente criado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '403':
          description: Sem permissão
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /auth/register/doctor:
    post:
      tags: [Auth]
      summary: Registrar Médico (ATENDENTE ou ADMIN)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RegisterDoctorInput' }
            example:
              name: "Dr. Novo"
              email: "medico.novo@tcc.com"
              cpf: "55555555555"
              password: "medico123"
              specialty: "Clínico Geral"
              crm: "CRM-SP-999999"
      responses:
        '201':
          description: Médico criado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /auth/register/attendant:
    post:
      tags: [Auth]
      summary: Registrar Atendente (somente ADMIN)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RegisterAttendantInput' }
            example:
              name: "Atendente Nova"
              email: "atendente.nova@tcc.com"
              cpf: "66666666666"
              password: "atendente123"
      responses:
        '201':
          description: Atendente criado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /doctors:
    get:
      tags: [Doctors]
      summary: Lista de médicos (público)
      security: []
      parameters:
        - in: query
          name: q
          schema: { type: string }
          description: Filtro por nome/especialidade
          example: "cardio"
      responses:
        '200':
          description: Lista de médicos
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/DoctorListItem' }

  /patients:
    get:
      tags: [Patients]
      summary: Listar pacientes (MÉDICO e ATENDENTE)
      responses:
        '200':
          description: Lista de pacientes
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/PatientListItem' }
    put:
      tags: [Patients]
      summary: Atualizar paciente (passar `id` no path correto — use o endpoint abaixo)
      deprecated: true
      responses:
        '410':
          description: Use /patients/{id} (PUT)

  /patients/{id}:
    get:
      tags: [Patients]
      summary: Ver paciente por ID (MÉDICO/ATENDENTE)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, minimum: 1 }
          example: 12
      responses:
        '200':
          description: Paciente
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PatientDetail' }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      tags: [Patients]
      summary: Atualizar paciente (MÉDICO/ATENDENTE)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, minimum: 1 }
          example: 12
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdatePatientInput' }
            example:
              name: "Paciente Atualizado"
              phone: "11970001234"
              address: "Rua Alterada, 789"
      responses:
        '200':
          description: Paciente atualizado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PatientDetail' }
        '404': { $ref: '#/components/responses/NotFound' }

  /availability:
    post:
      tags: [Availability]
      summary: Criar um slot manualmente
      description: |
        - **MÉDICO** cria para si mesmo.  
        - **ATENDENTE** deve informar `doctorId`.
        - O backend impede **sobreposição** de slots para o mesmo médico.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateSlotInput' }
            examples:
              medico:
                value: { startsAt: "2025-10-23T10:00:00.000Z", endsAt: "2025-10-23T10:45:00.000Z" }
              atendente:
                value: { doctorId: 3, startsAt: "2025-10-23T11:00:00.000Z", endsAt: "2025-10-23T11:45:00.000Z" }
      responses:
        '201':
          description: Slot criado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AvailabilitySlot' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '403': { $ref: '#/components/responses/Forbidden' }

    get:
      tags: [Availability]
      summary: Listar **slots livres** por médico/período (público)
      security: []
      parameters:
        - in: query
          name: doctorId
          schema: { type: integer, minimum: 1 }
          example: 3
        - in: query
          name: from
          schema: { type: string, format: date-time }
          example: "2025-10-23T00:00:00.000Z"
        - in: query
          name: to
          schema: { type: string, format: date-time }
          example: "2025-10-23T23:59:59.999Z"
      responses:
        '200':
          description: Slots disponíveis
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/AvailabilitySlot' }

  /availability/day-openings:
    post:
      tags: [Availability]
      summary: Abrir agenda do dia inteiro (07:00–18:00) com almoço (12–13)
      description: |
        Gera **vários slots** com duração fixa (`durationMin`) e **pula** o intervalo de almoço.
        - **ATENDENTE** deve informar `doctorId`.  
        - **MÉDICO** abre para si (ignora `doctorId`).
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/OpenDayInput' }
            example:
              date: "2025-10-23"
              startTime: "07:00"
              endTime: "18:00"
              durationMin: 45
              doctorId: 3
      responses:
        '201':
          description: Slots gerados
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/AvailabilitySlot' }
        '400': { $ref: '#/components/responses/BadRequest' }

  /availability/unused:
    delete:
      tags: [Availability]
      summary: Apagar **slots NÃO utilizados** em um intervalo
      description: Somente slots com `isBooked = false` serão removidos.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/DeleteUnusedInput' }
            example:
              from: "2025-10-23T10:00:00.000Z"
              to: "2025-10-23T11:30:00.999Z"
              doctorId: 3
      responses:
        '200':
          description: Resultado da limpeza
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: integer
                    example: 3
        '400': { $ref: '#/components/responses/BadRequest' }

  /availability/{id}:
    delete:
      tags: [Availability]
      summary: Apagar um slot por ID (apenas se não agendado)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, minimum: 1 }
          example: 101
      responses:
        '204':
          description: Slot apagado
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }

  /appointments:
    post:
      tags: [Appointments]
      summary: Criar/agendar uma consulta
      description: |
        - **PACIENTE** agenda para si (informa `slotId`).  
        - **ATENDENTE** pode agendar para um paciente (`patientId`).  
        O backend cria a consulta, marca o slot como `isBooked = true` quando apropriado, e define o **status inicial** (ex.: `PENDING`).
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateAppointmentInput' }
            examples:
              paciente:
                value: { slotId: 45, notes: "Dor de cabeça" }
              atendente:
                value: { slotId: 46, patientId: 12, notes: "Agendado pela recepção" }
      responses:
        '201':
          description: Consulta criada
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Appointment' }
        '400': { $ref: '#/components/responses/BadRequest' }

  /appointments/my:
    get:
      tags: [Appointments]
      summary: Agenda do usuário autenticado
      description: |
        - **PACIENTE** vê seus próprios agendamentos.  
        - **MÉDICO** vê os agendamentos como médico.
      responses:
        '200':
          description: Lista de consultas
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Appointment' }

  /appointments/doctor/{doctorId}:
    get:
      tags: [Appointments]
      summary: Agenda de um médico (ATENDENTE)
      parameters:
        - in: path
          name: doctorId
          required: true
          schema: { type: integer, minimum: 1 }
          example: 3
      responses:
        '200':
          description: Lista de consultas do médico
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Appointment' }

  /appointments/{id}/status:
    patch:
      tags: [Appointments]
      summary: Alterar status da consulta
      description: |
        Fluxos comuns:  
        - **ATENDENTE**: `PENDING → CONFIRMED`  
        - **PACIENTE**: `PENDING → CANCELLED`  
        - **MÉDICO**: `CONFIRMED → COMPLETED` ou `CONFIRMED → CANCELLED`
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, minimum: 1 }
          example: 77
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateAppointmentStatusInput' }
            examples:
              confirmar:
                value: { status: "CONFIRMED" }
              cancelar:
                value: { status: "CANCELLED" }
              finalizar:
                value: { status: "COMPLETED" }
      responses:
        '200':
          description: Consulta atualizada
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Appointment' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }

  /exams/upload:
    post:
      tags: [Exams]
      summary: Upload de resultado de exame (arquivo)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file: { type: string, format: binary }
                patientId:
                  type: integer
                  description: Obrigatório quando **ATENDENTE** ou **MÉDICO** envia para um paciente específico
                description:
                  type: string
            encoding:
              file:
                contentType: application/pdf, image/png, image/jpeg
      responses:
        '201':
          description: Exame salvo
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ExamResult' }
        '400': { $ref: '#/components/responses/BadRequest' }

  /exams/my:
    get:
      tags: [Exams]
      summary: Meus exames (PACIENTE)
      responses:
        '200':
          description: Lista de exames do paciente autenticado
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/ExamResult' }

  /exams/patient/{patientId}:
    get:
      tags: [Exams]
      summary: Exames de um paciente (MÉDICO/ATENDENTE)
      parameters:
        - in: path
          name: patientId
          required: true
          schema: { type: integer, minimum: 1 }
          example: 12
      responses:
        '200':
          description: Lista de exames do paciente informado
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/ExamResult' }

  /reports/kpis:
    get:
      tags: [Reports]
      summary: KPIs gerais do período (ADMIN)
      parameters:
        - $ref: '#/components/parameters/From'
        - $ref: '#/components/parameters/To'
      responses:
        '200':
          description: KPIs
          content:
            application/json:
              schema: { $ref: '#/components/schemas/KpiResponse' }

  /reports/appointments/aggregate:
    get:
      tags: [Reports]
      summary: Consultas por período (dia/semana/mês) por médico
      parameters:
        - $ref: '#/components/parameters/From'
        - $ref: '#/components/parameters/To'
        - in: query
          name: granularity
          description: Nível de agrupamento
          schema: { type: string, enum: [day, week, month], default: day }
          example: day
        - in: query
          name: tz
          description: Fuso para agrupar datas
          schema: { type: string, default: "-03:00" }
          example: "-03:00"
        - in: query
          name: doctorId
          schema: { type: integer, minimum: 1 }
          example: 3
        - in: query
          name: serviceId
          description: Mantido apenas se existir coluna em appointments (sem join)
          schema: { type: integer, minimum: 1 }
        - $ref: '#/components/parameters/Format'
      responses:
        '200':
          description: Séries agregadas
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/AppointmentAggregateItem' }

  /reports/doctors/utilization:
    get:
      tags: [Reports]
      summary: Produtividade e utilização por médico
      parameters:
        - $ref: '#/components/parameters/From'
        - $ref: '#/components/parameters/To'
        - $ref: '#/components/parameters/Format'
      responses:
        '200':
          description: Métricas por médico
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/DoctorUtilizationItem' }

  /reports/patients/retention:
    get:
      tags: [Reports]
      summary: Retenção de pacientes (novos x recorrentes) e churn opcional
      parameters:
        - $ref: '#/components/parameters/From'
        - $ref: '#/components/parameters/To'
        - in: query
          name: baselineFrom
          schema: { type: string, format: date-time }
          example: "2025-09-01T00:00:00.000Z"
        - in: query
          name: baselineTo
          schema: { type: string, format: date-time }
          example: "2025-09-30T23:59:59.999Z"
      responses:
        '200':
          description: Retenção e churn aproximado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/RetentionResponse' }

  /reports/exams/summary:
    get:
      tags: [Reports]
      summary: Resumo de uploads de exames (por MIME e por papel do uploader)
      parameters:
        - $ref: '#/components/parameters/From'
        - $ref: '#/components/parameters/To'
        - $ref: '#/components/parameters/Format'
      responses:
        '200':
          description: Resumo de exames
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ExamsSummaryResponse' }

  /reports/appointments/detailed:
    get:
      tags: [Reports]
      summary: Relatório detalhado (MÉDICO/ATENDENTE) ou agregado (ADMIN)
      parameters:
        - $ref: '#/components/parameters/From'
        - $ref: '#/components/parameters/To'
        - in: query
          name: doctorId
          schema: { type: integer, minimum: 1 }
        - in: query
          name: serviceId
          schema: { type: integer, minimum: 1 }
          description: Apenas ID (sem join de serviço)
        - $ref: '#/components/parameters/Format'
      responses:
        '200':
          description: Lista detalhada (MÉDICO/ATENDENTE) ou agregada (ADMIN)
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items: { $ref: '#/components/schemas/AppointmentDetailedItem' }
                  - type: array
                    items: { $ref: '#/components/schemas/AppointmentAdminSummaryItem' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    From:
      in: query
      name: from
      required: false
      schema: { type: string, format: date-time }
      example: "2025-10-01T00:00:00.000Z"
    To:
      in: query
      name: to
      required: false
      schema: { type: string, format: date-time }
      example: "2025-10-31T23:59:59.999Z"
    Format:
      in: query
      name: format
      required: false
      schema: { type: string, enum: [json, csv], default: json }
      example: json

  responses:
    BadRequest:
      description: Requisição inválida
      content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
    Forbidden:
      description: Sem permissão
      content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
    NotFound:
      description: Não encontrado
      content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }

  schemas:
    # ==== Auth ====
    LoginInput:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 3 }

    LoginResponse:
      type: object
      properties:
        token: { type: string }
        user: { $ref: '#/components/schemas/User' }

    MeResponse:
      type: object
      properties:
        user: { $ref: '#/components/schemas/User' }

    RegisterPatientInput:
      type: object
      required: [name, email, cpf, password]
      properties:
        name: { type: string }
        email: { type: string, format: email }
        cpf: { type: string }
        password: { type: string }
        phone: { type: string }
        address: { type: string }
        birthDate: { type: string, format: date }

    RegisterDoctorInput:
      type: object
      required: [name, email, cpf, password, specialty, crm]
      properties:
        name: { type: string }
        email: { type: string, format: email }
        cpf: { type: string }
        password: { type: string }
        specialty: { type: string }
        crm: { type: string }

    RegisterAttendantInput:
      type: object
      required: [name, email, cpf, password]
      properties:
        name: { type: string }
        email: { type: string, format: email }
        cpf: { type: string }
        password: { type: string }

    # ==== Core ====
    Role:
      type: string
      enum: [ADMIN, ATENDENTE, MEDICO, PATIENT]

    User:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        email: { type: string, format: email }
        role: { $ref: '#/components/schemas/Role' }

    AvailabilitySlot:
      type: object
      properties:
        id: { type: integer }
        doctorId: { type: integer }
        startsAt: { type: string, format: date-time }
        endsAt: { type: string, format: date-time }
        isBooked: { type: boolean }
      example:
        id: 101
        doctorId: 3
        startsAt: "2025-10-23T10:00:00.000Z"
        endsAt: "2025-10-23T10:45:00.000Z"
        isBooked: false

    CreateSlotInput:
      type: object
      required: [startsAt, endsAt]
      properties:
        doctorId:
          type: integer
          description: Obrigatório quando **ATENDENTE** cria para um médico
        startsAt: { type: string, format: date-time }
        endsAt: { type: string, format: date-time }

    OpenDayInput:
      type: object
      required: [date, startTime, endTime, durationMin]
      properties:
        date: { type: string, description: Data base em formato YYYY-MM-DD, example: "2025-10-23" }
        startTime: { type: string, description: "HH:mm", example: "07:00" }
        endTime: { type: string, description: "HH:mm", example: "18:00" }
        durationMin: { type: integer, minimum: 5, example: 45 }
        doctorId:
          type: integer
          description: Obrigatório quando **ATENDENTE** abre agenda de um médico

    DeleteUnusedInput:
      type: object
      required: [from, to, doctorId]
      properties:
        from: { type: string, format: date-time }
        to: { type: string, format: date-time }
        doctorId: { type: integer, minimum: 1 }

    AppointmentStatus:
      type: string
      description: |
        Enum amplo para cobrir variações de status existentes no projeto.
      enum:
        - PENDING
        - CONFIRMED
        - CANCELLED
        - COMPLETED
        - REQUESTED
        - ACCEPTED
        - DENIED
        - CANCELED

    Appointment:
      type: object
      properties:
        id: { type: integer }
        doctorId: { type: integer }
        patientId: { type: integer }
        serviceId:
          type: integer
          nullable: true
          description: Campo opcional; sem join de Service neste projeto
        startsAt: { type: string, format: date-time }
        endsAt: { type: string, format: date-time }
        status: { $ref: '#/components/schemas/AppointmentStatus' }
        notes: { type: string, nullable: true }
        doctor:
          $ref: '#/components/schemas/User'
        patient:
          $ref: '#/components/schemas/User'

    CreateAppointmentInput:
      type: object
      properties:
        slotId: { type: integer }
        patientId:
          type: integer
          description: Necessário quando **ATENDENTE** agenda para outro paciente
        notes: { type: string }

    UpdateAppointmentStatusInput:
      type: object
      required: [status]
      properties:
        status: { $ref: '#/components/schemas/AppointmentStatus' }

    # ==== Patients/Doctors list ====
    PatientListItem:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        email: { type: string }
        phone: { type: string }

    PatientDetail:
      allOf:
        - $ref: '#/components/schemas/PatientListItem'
        - type: object
          properties:
            address: { type: string }
            birthDate: { type: string, format: date }
    UpdatePatientInput:
      type: object
      properties:
        name: { type: string }
        email: { type: string }
        phone: { type: string }
        address: { type: string }

    DoctorListItem:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        specialty: { type: string }
        crm: { type: string }

    # ==== Exams ====
    ExamResult:
      type: object
      properties:
        id: { type: integer }
        patientId: { type: integer }
        uploadedByUserId: { type: integer }
        doctorId:
          type: integer
          nullable: true
        title:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        filePath: { type: string }
        mimeType: { type: string }
        size: { type: integer, description: bytes }
        createdAt: { type: string, format: date-time }
        uploadedBy:
          $ref: '#/components/schemas/User'
        patient:
          $ref: '#/components/schemas/User'

    # ==== Reports ====
    KpiResponse:
      type: object
      properties:
        total: { type: integer }
        requested: { type: integer }
        accepted: { type: integer }
        denied: { type: integer }
        canceled: { type: integer }
        completed: { type: integer }
        avgDurationMin: { type: integer, nullable: true }
        revenueEstimated: { type: number, nullable: true }
        utilizationRate: { type: number, nullable: true }
      example:
        total: 42
        requested: 5
        accepted: 12
        denied: 1
        canceled: 4
        completed: 20
        avgDurationMin: 43
        revenueEstimated: null
        utilizationRate: 0.67

    AppointmentAggregateItem:
      type: object
      properties:
        period: { type: string, example: "2025-10-23" }
        doctorId: { type: integer }
        doctor: { type: string, nullable: true }
        serviceId: { type: integer, nullable: true }
        requested: { type: integer }
        accepted: { type: integer }
        denied: { type: integer }
        canceled: { type: integer }
        completed: { type: integer }
        total: { type: integer }
        avgDurationMin: { type: integer, nullable: true }
        completionRate: { type: number, nullable: true }

    DoctorUtilizationItem:
      type: object
      properties:
        doctorId: { type: integer }
        doctor: { type: string, nullable: true }
        appointments: { type: integer }
        minutesBookedByAppt: { type: integer }
        minutesAvailable: { type: integer }
        minutesBookedBySlots: { type: integer }
        utilizationRate: { type: number, nullable: true }
        avgApptsPerDay: { type: number, nullable: true }

    RetentionResponse:
      type: object
      properties:
        newcomers: { type: integer }
        returning: { type: integer }
        churnApprox: { type: integer, nullable: true }
      example:
        newcomers: 10
        returning: 32
        churnApprox: 7

    ExamsSummaryResponse:
      type: object
      properties:
        byMime:
          type: array
          items:
            type: object
            properties:
              mimeType: { type: string }
              count: { type: integer }
              totalMB: { type: number }
        byRole:
          type: object
          additionalProperties: { type: integer }
      example:
        byMime:
          - { mimeType: "application/pdf", count: 12, totalMB: 23.4 }
          - { mimeType: "image/png", count: 5, totalMB: 9.8 }
        byRole:
          MEDICO: 9
          PATIENT: 7
          ADMIN: 1

    AppointmentDetailedItem:
      type: object
      properties:
        id: { type: integer }
        doctorId: { type: integer }
        doctor: { type: string }
        patientId: { type: integer }
        patient: { type: string }
        serviceId: { type: integer, nullable: true }
        startsAt: { type: string, format: date-time }
        endsAt: { type: string, format: date-time }
        status: { $ref: '#/components/schemas/AppointmentStatus' }
        notes: { type: string, nullable: true }

    AppointmentAdminSummaryItem:
      type: object
      properties:
        doctorId: { type: integer }
        doctor: { type: string }
        serviceId: { type: integer, nullable: true }
        requested: { type: integer }
        accepted: { type: integer }
        denied: { type: integer }
        canceled: { type: integer }
        completed: { type: integer }
        total: { type: integer }

    # ==== Error ====
    ErrorResponse:
      type: object
      properties:
        error: { type: string }
      example: { error: "Include unexpected. Element has to be either a Model, an Association or an object." }
